# -*- coding: utf-8 -*-
"""Calrories.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kf3mmuPMVcjaqZ1dB_KPGVZBfZFY-5Gu

Install all the required dependencies
"""

"""Data Collection"""

#loading the data -> pandas DataFrame
calories_data= pd.read_csv('datafull.csv')

#print the data after the combination
calories_data.head()

#some information about the dataset
calories_data.info()

#Check if we have missing values
calories_data.isnull().sum()

correlation = calories_data.corr(numeric_only=True)

#Convert the Text data to numerical values
calories_data.replace({"Gender":{'male':0,'female':1}} , inplace=True)

calories_data.head()

"""Separating features and target"""

# Interaction term: Weight * Duration
calories_data['Weight_Duration_Interaction'] = calories_data['Weight'] * calories_data['Duration']

features_to_use = ['Gender', 'Height', 'Weight', 'Duration', 'Heart_Rate', 'Weight_Duration_Interaction']
X = calories_data[features_to_use]
Y = calories_data['Calories']

"""
Feature engineering
Split the data training and test
"""

X_train, X_test, Y_train, Y_test=train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(X)

print(Y)


"""
Model Training
"""

# Hyperparameter grid
param_grid = {
    'max_depth': [None, 10, 20, 30],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'max_features': ['sqrt', 'log2', None]  # Adjusted to valid options
}

# Decision Tree model with hyperparameter tuning
decision_tree_model = DecisionTreeRegressor()
grid_search = GridSearchCV(decision_tree_model, param_grid, cv=5, scoring='neg_mean_squared_error')
grid_search.fit(X_train, Y_train)

# Get the best model from the search
best_decision_tree_model = grid_search.best_estimator_

# Use the best model for predictions
dt_pred_tuned = best_decision_tree_model.predict(X_test)
dt_rmse_tuned = np.sqrt(mean_squared_error(Y_test, dt_pred_tuned))

# Perform 5-fold cross-validation for the tuned Decision Tree Model
dt_cv_scores_tuned = cross_val_score(best_decision_tree_model, X, Y, cv=5, scoring='neg_mean_squared_error')
dt_cv_rmse_scores_tuned = np.sqrt(-dt_cv_scores_tuned)
